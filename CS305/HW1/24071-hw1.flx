 int lineNo = 1;
 int colNo = 1;
INT		-?[0-9]+
REAL 		(-[0-9]+[.][0-9]+)|([0-9]*[.][0-9]+)
IDENT		[a-zA-Z][a-zA-Z0-9_]*
INVALID		(-?[0-9]+[.])|(-[.][0-9]+)
STRING          (["][^"]*["])|(['][^']*['])

%x COMMENT

%%

"//"			BEGIN(COMMENT);
<COMMENT>.*
<COMMENT>"\n"		BEGIN(INITIAL);

if                      {
			printf("%d %d tIF \n", lineNo, colNo);
			colNo += yyleng;
			}
while                   {
			printf("%d %d tWHILE \n", lineNo, colNo);
		   	colNo += yyleng;
			}
in			{
			printf("%d %d tIN \n", lineNo, colNo);
			colNo += yyleng;
			}
for                    	{
                        printf("%d %d tFOR \n", lineNo, colNo);
                        colNo += yyleng;
                        }
function		{
                        printf("%d %d tFUNCTION \n", lineNo, colNo);
                        colNo += yyleng;
                        }
var 			{
                        printf("%d %d tVAR \n", lineNo, colNo);
                        colNo += yyleng;
                        }
null			{
                        printf("%d %d tNULL \n", lineNo, colNo);
                        colNo += yyleng;
                        }
else			{
                        printf("%d %d tELSE \n", lineNo, colNo);
                        colNo += yyleng;
                        }
NaN			{
                        printf("%d %d tNAN \n", lineNo, colNo);
                        colNo += yyleng;
                        }
undefined		{
                        printf("%d %d tUNDEFINED \n", lineNo, colNo);
                        colNo += yyleng;
                        }
true			{
                        printf("%d %d tTRUE \n", lineNo, colNo);
                        colNo += yyleng;
                        }
false			{
                        printf("%d %d tFALSE \n", lineNo, colNo);
                        colNo += yyleng;
                        }
Infinity		{
                        printf("%d %d tINFINITY \n", lineNo, colNo);
                        colNo += yyleng;
                        }
return			{
                        printf("%d %d tRETURN \n", lineNo, colNo);
                        colNo += yyleng;
                        }
{INVALID}		{
			printf("%d %d Invalid Number: %s \n", lineNo, colNo, yytext);
			colNo += yyleng;
			}
{INT}			{
			printf("%d %d tINT (%d) \n", lineNo, colNo, atoi(yytext));
                        colNo += yyleng;
                        }
{REAL}		 	{
                        printf("%d %d tREAL (%f) \n", lineNo, colNo, atof(yytext));
                        colNo += yyleng;
                        }
"+"			{
                        printf("%d %d tPLUS \n", lineNo, colNo);
                        colNo += yyleng;
                        }
"-"			{
                        printf("%d %d tMINUS \n", lineNo, colNo);
                        colNo += yyleng;
                        }
","			{
                        printf("%d %d tCOMMA \n", lineNo, colNo);
                        colNo += yyleng;
                        }
";"			{
                        printf("%d %d tSEMICOLON \n", lineNo, colNo);
                        colNo += yyleng;
                        }
":"			{
                        printf("%d %d tCOLON \n", lineNo, colNo);
                        colNo += yyleng;
                        }
"("			{
                        printf("%d %d tLPAR \n", lineNo, colNo);
                        colNo += yyleng;
                        }
")"			{
                        printf("%d %d tRPAR \n", lineNo, colNo);
                        colNo += yyleng;
                        }
"%"			{
                        printf("%d %d tPERCENT \n", lineNo, colNo);
                        colNo += yyleng;
                        }
"["			{
                        printf("%d %d tLBRKT \n", lineNo, colNo);
                        colNo += yyleng;
                        }
"]"			{
                        printf("%d %d tRBRKT \n", lineNo, colNo);
                        colNo += yyleng;
                        }
"<"			{
                        printf("%d %d tLT \n", lineNo, colNo);
                        colNo += yyleng;
                        }
">"			{
                        printf("%d %d tGT \n", lineNo, colNo);
                        colNo += yyleng;
                        }
"*"			{
                        printf("%d %d tSTAR \n", lineNo, colNo);
                        colNo += yyleng;
                        }
"="			{
                        printf("%d %d tEQ \n", lineNo, colNo);
                        colNo += yyleng;
                        }
"!"			{
                        printf("%d %d tNOT \n", lineNo, colNo);
                        colNo += yyleng;
                        }
"{"			{
                        printf("%d %d tLCURLY \n", lineNo, colNo);
                        colNo += yyleng;
                        }
"}"			{
                        printf("%d %d tRCURLY \n", lineNo, colNo);
                        colNo += yyleng;
                        }

[ \t]			colNo++;

{IDENT}			{
                        printf("%d %d tIDENT (%s) \n", lineNo, colNo, yytext);
                        colNo += yyleng;
                        }
{STRING} 		{
			yytext[yyleng-1] = '\0'; 
			printf("%d %d tSTRING (%s)\n",lineNo, colNo,(yytext+1)); 
			colNo += yyleng; 
			}
\n			{ 
			lineNo++;
			colNo = 1; 
			}			
.			printf("UNRECOGNIZED CHARACTER");

%%

int main(){

	yylex();
}
