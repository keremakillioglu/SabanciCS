//KEREM AKILLIOGLU, 24179
// This program aims to create a game for two robot (One robot is player and other is reflection robot). In this game there will be random distributed number of items between 1 and 10 in random cells at a 10x10 environment for both robots.
// Player robot will move and at the same time replication robot will have the symmetric motion of player robot. While robots are moving they will collect the items in cells, if an item exists. This game continues until each robot gets every item in their environment.
// If they start in a robot world, it is impossible for them to crash; but considering all cases I added IsAlive() bool function as a game rule. If robots crash, game will end.
#include <string>
#include "Robots_Modified.h"
#include "miniFW_Modified.h"
#include "strutils.h"
#include "randgen.h"//necessary libraries are added
using namespace std;//standard namespace is used

void DisplayThingCount(Robot & curiosity, Robot & stalker) // this counter function takes robots as variables and delivers a message at the end
{
	int thing_env = GetThingCount(0,0,9,9);  //a 9x9 area is defined
	int bag1 = curiosity.BagContent(); // with this line, picked item numbers are collected and stored for my player robot
	int bag2 = stalker.BagContent(); // stalker robot is my copy robot, this line allows me to collect picked item numbers for my copy robot
	ShowMessage("Player robot gathered "+ itoa(bag1) + " things and got stuck "+ itoa(curiosity.GetBump()) +" times,\n" + "Reflection robot gathered "+ itoa(bag2) + " things and got stuck "+  itoa(stalker.GetBump())+ " times.\n");
}// message is displayed as stated in homework5 instructions,in order show the numbers i had to use itoa, which turns an integer into a string

//"Player robot gathered A things and got stuck X times,
//Reflection robot gathered B things and got stuck Y times."

void InvisibleTurnBack(Robot & curiosity, Direction d1, Robot & stalker, Direction d2) //This function ables my robots to turn back to their initial position
{
	curiosity.GhostTurn(d1); //As written in the cpp file, GhostTurn actually turns my robot; but it doesn't redraw the final position of the robot
	stalker.GhostTurn(d2); // Thus, this function will help me to making the robots to turning back to their initial directions
}

int main()
{
	RandGen inpt, xcoo, ycoo,totalslot; //using randgen class, random numbers will be created; and it is defined here
	int slotnum=totalslot.RandInt(40,100); //total number of items are generated by this line. A random number between 40 and 100 will be picked
	int k=0; //k will be used in the while loop and initialized here
	int x1= xcoo.RandInt(0,19);// with this line, i pick a random x number to plug some items in it
	int y1= ycoo.RandInt(0,9);// with this line, i pick a random y number to plug some items in it
	int cellcounter= GetCellCount(x1,y1); // the total number of items is checked with this line

	while (k<slotnum && cellcounter==0) // if random selected cell is empty, i will get inside my loop. At the beginning all cells are empty, since there is no problem at the beginning
	{
	int input= inpt.RandInt(1,10); // a number between 1 and 10 picked
	PutThings(x1, y1, input); // a random integer plugged to a randomly picked cell
	x1= xcoo.RandInt(0,19); //a random x coordinate is picked
	y1= ycoo.RandInt(0,9); // a random y coorinate is picked
	cellcounter= GetCellCount(x1,y1); //items in the given cell are counted 
	 
	while (cellcounter !=0) // when there are some items in the cell, i will get inside of my loop
		{
			x1= xcoo.RandInt(0,19); //a random x coordinate will be picked
			y1= ycoo.RandInt(0,9); // a random y coorinate will be picked
			cellcounter= GetCellCount(x1,y1); //total items are counted, when it is zero i will get outside of my loop
		}
	k++; //k is increased and this loop will countinue until i reach my random generated value, which is the value between 40 and 100 
	}

	Robot curiosity(0,9); //my player robot is created at asked location and its name is curiosity, i influenced by the rover which went to mars
	curiosity.SetColor(blue); //initial color is selected blue as wanted
	curiosity.InitializeBump(); // initial value of bump is set up as zero
	Robot stalker(19,9); //my reflection robot is created at asked location and its name is stalker
	stalker.SetColor(red); //initial color is selected red as wanted
	stalker.InitializeBump(); // initial value of bump is set up as zero

	while (GetThingCount(0,0,19,9) != 0 && stalker.IsAlive() && curiosity.IsAlive()) // when there are some items in the environment, game continiues. when there is no item left game will end
	{	//also robots should be alive for this game, if they crash the game will end too
		while(!curiosity.CellEmpty()) //if some items exist on the player robot's cell
			curiosity.PickThing(); // player robot will collect all items until there is no one left
			while(!stalker.CellEmpty()) // the same operation will be held for the reflection robot
			stalker.PickThing();
			
			Direction d1=curiosity.GetDirection(); //first direction of the robots are collected
			Direction d2= stalker.GetDirection() ; // initial position of robots are important since i will check if i should turn a robot without redrawing it. 
			//this means i will turn my robots to asked direction first, and i have to turn them back to their initial direction at the end since i have to redraw my functions in the following operations
		if (IsPressed(keyRightArrow) ) // when user presses right arrow
		{	
			curiosity.GhostTurn(east); //player robot turns to east without redrawing
			curiosity.SetBump(); // member function checks if a bump exists for player robot, and if exists, it adds one up to bump counter
			stalker.GhostTurn(west); // reflection robot turns to west
			stalker.SetBump(); // member function checks if a bump exists for reflection robot, and if exists, it adds one up to bump counter

			if(!curiosity.FacingWall() && !stalker.FacingWall()) //if none of the robots are facing wall
			{
				InvisibleTurnBack( curiosity, d1, stalker, d2 ); //robots will return to their initial position without redrawing the movement
				curiosity.TurnFace(east); //since there is no wall, player robot will turn to east
				stalker.TurnFace(west);	//since there is no wall, reflection robot will turn to east with a symmetrical move
				curiosity.Move(); //then both robots will move one unit
				stalker.Move();
			}
				else//if one of the robots are facing wall
				{InvisibleTurnBack( curiosity, d1, stalker, d2 );}//both of the robots will return to their initial direction without redrawing the movement
		}
		else if (IsPressed(keyLeftArrow)) //almost the same operations will be held when user presses left arrow
		{
			curiosity.GhostTurn(west);
			curiosity.SetBump();
			stalker.GhostTurn(east);
			stalker.SetBump();

			if( !curiosity.FacingWall() && !stalker.FacingWall())
			{
			InvisibleTurnBack( curiosity, d1, stalker, d2 );
			curiosity.TurnFace(west);
			stalker.TurnFace(east);
			curiosity.Move();
			stalker.Move();
			}
				else
				{InvisibleTurnBack( curiosity, d1, stalker, d2 );}
		}

		else if (IsPressed(keyUpArrow)) //almost the same operations will be held when user presses up arrow
		{
			curiosity.GhostTurn(north);
			curiosity.SetBump();
			stalker.GhostTurn(north);
			stalker.SetBump();

				if( !curiosity.FacingWall() && !stalker.FacingWall())
				{
				InvisibleTurnBack( curiosity, d1, stalker, d2 );
				curiosity.TurnFace(north);
				stalker.TurnFace(north);
				curiosity.Move();
				stalker.Move();
				}

				else
				{InvisibleTurnBack( curiosity, d1, stalker, d2 );}
		}

		else if (IsPressed(keyDownArrow)) //almost the same operations will be held when the user presses down arrow
		{
				curiosity.GhostTurn(south);
				curiosity.SetBump();
				stalker.GhostTurn(south);
				stalker.SetBump();
				
				if( !curiosity.FacingWall() && !stalker.FacingWall())
				{
				InvisibleTurnBack( curiosity, d1, stalker, d2 );
				curiosity.TurnFace(south);		
				stalker.TurnFace(south);		
				curiosity.Move();
				stalker.Move();
				}

				else
				{InvisibleTurnBack( curiosity, d1, stalker, d2 );}
		}

	}
	DisplayThingCount(curiosity,stalker); //prepared message will be displayed
	
	return 0; //This line is added to run this program succesfully
}